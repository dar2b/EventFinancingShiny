scale_fill_brewer(palette = "Blues") + coord_map() + theme_bw()
no_axisLabel
tx
no_axisLabel = tx + ylab("") + xlab("") + ggtitle("Lone Star") +
scale_fill_brewer(palette = "Blues") + coord_map() + theme_bw() +
scale_fill_discrete(name = "Lengend")
no_axisLabel = tx + ylab("") + xlab("") + ggtitle("Lone Star") +
scale_fill_brewer(palette = "Blues") + coord_map() + theme_bw() +
scale_fill_discrete(name = "Lengend")
no_axisLabel
no_axisLabel = tx + ylab("") + xlab("") + ggtitle("Lone Star") +
scale_fill_brewer(palette = "Blues") + coord_map() + theme_bw() +
scale_fill_discrete(name = "Legend")
no_axisLabel = tx + ylab("") + xlab("") + ggtitle("Lone Star") +
scale_fill_brewer(palette = "Blues", name = "Population sizes", labels = c('0-999','1000- 9999', '10000-99,999', '100,000 - 999,999', '1,000,000+' )) + coord_map() + theme_bw() +
q <- ggplot(data = mpg, aes(x = displ, y = hwy
)) + geom_pount
no_axisLabel = tx + ylab("") + xlab("") + ggtitle("Lone Star") +
scale_fill_brewer(palette = "Blues", name = "Population sizes", labels = c('0-999','1000- 9999', '10000-99,999', '100,000 - 999,999', '1,000,000+' )) + coord_map() + theme_bw()
no_axisLabel = tx + ylab("") + xlab("") + ggtitle("Lone Star") +
scale_fill_brewer(palette = "Blues", name = "Population sizes", labels = c('0-999','1000- 9999', '10000-99,999', '100,000 - 999,999', '1,000,000+' )) + coord_map() + theme_bw()
no_axisLabel
no_axisLabel = tx + ylab("") + xlab("") + ggtitle("Lone Star") +
scale_fill_brewer(palette = "Blues", name = "Population sizes", labels = c('0-999','1000- 9,999', '10,000-99,999', '100,000 - 999,999', '1,000,000+' )) + coord_map() + theme_bw()
no_axisLabel
# Side 97
p <- ggplot(data = iris, aes(x = Species, y = Sepal.Length)) +
geom_violin(aes(fill = Species))
p
# Slide 98
p <- ggplot(iris, aes(x = Species, y = Sepal.Length)) +
geom_violin(fill = 'gray', alpha = 0.5) +
geom_dotplot(aes(fill = Species), binaxis = "y", stackdir = "center")
p
p <- ggplot(mpg, aes(x = 1)) +
geom_bar(aes(fill = class)) +
coord_polar(theta = "y")
p
dir <- cut_interval(runif(100,0,360), n=16)
mag <- cut_interval(rgamma(100,15), n=4)
sample = data.frame(dir=dir, mag=mag)
p <- ggplot(sample, aes(x=dir, fill=mag) ) +
geom_bar() +
coord_polar()
p
# Slide 105
install.packages("vcd")
library(vcd)
mosaic(Survived ~ Class + Sex, data=Titanic[1:3], shade=TRUE,
highlighting_fill=c('red4',"skyblue"), highlighting_direction="right")
library(vcd)
mosaic(Survived ~ Class + Sex, data=Titanic[1:3], shade=TRUE,
highlighting_fill=c('red4',"skyblue"), highlighting_direction="right")
library(vcd)
library(vcd)
# Slide 105
install.packages("vcd")
install.packages("vcd")
library(vcd)
install.packages('grid')
install.packages("grid")
install.packages("grid")
install.packages("grid")
library(vcd)
# Slide 107
# install.packages("treemap")
library(treemap)
install.packages("treemap")
data = read.csv('~/RStudio/ggplot2_part2/apple.csv', TRUE)
data = read.csv('~/RStudio/ggplot2_part2/apple.csv', TRUE)
data
treemap(data,
index=c("item", "subitem"),
vSize="time1206",
vColor="time1106",
type="comp",
title='Apple Corp. Financial Statements',
palette='RdBu')
# Slide 107
# install.packages("treemap")
library(treemap)
ggplot(data = counties, aes(x = long, y = lat )) +
geom_polygon(aes(group = group, fill = group)
tx <- g + geom_polygon(aes(group = group, fill = bin))
tx + ggtitle("Population of Texas Counties")
tx2 <- tx + ggtitle("Population of Texas Counties")
g <- ggplot(data = diamonds, aes(x = carat, y = price)) +
geom_point()
str(g)
g$coordinates
coord_cartesian()
g2 = g + coord_polar()
g + coord_flip()
g + coord_fixed(ratio = 1/10000)
g
g + coord_trans(y = "log10")
g + coord_trans(y = "log10", x = "log10")
g + coord_cartesian(ylim = c(0,5000), xlim = c(0,1))
tx + coord_map()
d2 <- subset(diamonds, color ==
"D")
cc <- ggplot(data = d2, aes(x = color)) + geom_bar(aes(fill = cut), position = "fill")
cc
cc + coord_polar(theta = "y")
scale_aesthetic_name()
ggplot(data = mpg, aes(x = displ, y =
hwy)) + geom_point(aes(color = cty))
last_plot() + scale_color_gradient(low = "red", high = "yellow")
ggplot(data = mpg, aes(x = displ, y = hwy)) +
geom_point(aes(size = cyl))
last_plot() + scale_size_area()
ggplot(data = mpg, aes(x = displ, y = hwy)) + geom_point(aes(shape = fl))
last_plot() + scale_shape_manual(values = c(0, 15, 1, 16, 3))
r <- ggplot(data = mpg, a)
RColorBrewer::display.brewer.all()
tx + scale_fill_brewer(palette = "Greens")
tx + scale_fill_manual(values = c("red", "orange", "yellow", "green", "blue"))
tx + theme_grey()
tx + theme_bw()
tx
tx + theme(panel.border = element_rect(colour = "black", fill = NA))
library(ggthemes)
p + theme_excel() + scale_fill_ex
tx
library(RColorBrewer)
no_axisLabel = tx + ylab("") + xlab("") + ggtitle("Lone Star") +
scale_fill_brewer(palette = "Blues", name = "Population sizes", labels = c('0-999','1000- 9,999', '10,000-99,999', '100,000 - 999,999', '1,000,000+' )) +
coord_map() + theme_bw()
q <- ggplot(data = mpg, aes(x = displ, y = hwy
)) + geom_point()
dates <- c("Sep/1/2012","Aug/1/2013","Jul/1/2013")
# fill your code below``
sorted_dates <- sort(as.Date(dates, format='%B/%d/%y'))
format(sorted_dates, '%B/%d/%y')
dates <- c("Sep/1/2012","Aug/1/2013","Jul/1/2013")
date_ <- sort(as.Date(dates), format='%B/%d/%y'))
ggplot(data = counties, aes(x = long, y = lat )) +
geom_polygon(aes(group = group, fill = group)
tx <- g + geom_polygon(aes(group = group, fill = bin))
tx + ggtitle("Population of Texas Counties")
tx2 <- tx + ggtitle("Population of Texas Counties")
g <- ggplot(data = diamonds, aes(x = carat, y = price)) +
geom_point()
str(g)
g$coordinates
coord_cartesian()
g2 = g + coord_polar()
g + coord_flip()
g + coord_fixed(ratio = 1/10000)
g
g + coord_trans(y = "log10")
g + coord_trans(y = "log10", x = "log10")
g + coord_cartesian(ylim = c(0,5000), xlim = c(0,1))
tx + coord_map()
d2 <- subset(diamonds, color ==
"D")
cc <- ggplot(data = d2, aes(x = color)) + geom_bar(aes(fill = cut), position = "fill")
cc
cc + coord_polar(theta = "y")
scale_aesthetic_name()
ggplot(data = mpg, aes(x = displ, y =
hwy)) + geom_point(aes(color = cty))
last_plot() + scale_color_gradient(low = "red", high = "yellow")
ggplot(data = mpg, aes(x = displ, y = hwy)) +
geom_point(aes(size = cyl))
last_plot() + scale_size_area()
ggplot(data = mpg, aes(x = displ, y = hwy)) + geom_point(aes(shape = fl))
last_plot() + scale_shape_manual(values = c(0, 15, 1, 16, 3))
r <- ggplot(data = mpg, a)
RColorBrewer::display.brewer.all()
tx + scale_fill_brewer(palette = "Greens")
tx + scale_fill_manual(values = c("red", "orange", "yellow", "green", "blue"))
tx + theme_grey()
tx + theme_bw()
tx
tx + theme(panel.border = element_rect(colour = "black", fill = NA))
library(ggthemes)
p + theme_excel() + scale_fill_ex
tx
library(RColorBrewer)
no_axisLabel = tx + ylab("") + xlab("") + ggtitle("Lone Star") +
scale_fill_brewer(palette = "Blues", name = "Population sizes", labels = c('0-999','1000- 9,999', '10,000-99,999', '100,000 - 999,999', '1,000,000+' )) +
coord_map() + theme_bw()
q <- ggplot(data = mpg, aes(x = displ, y = hwy
)) + geom_point()
dates <- c("Sep/1/2012","Aug/1/2013","Jul/1/2013")
# fill your code below``
sorted_dates <- sort(as.Date(dates, format='%B/%d/%y'))
format(sorted_dates, '%B/%d/%y')
dates <- c("Sep/1/2012","Aug/1/2013","Jul/1/2013")
date_ <- sort(as.Date(dates), format='%B/%d/%y'))
ggplot(data = counties, aes(x = long, y = lat )) +
geom_polygon(aes(group = group, fill = group)
tx <- g + geom_polygon(aes(group = group, fill = bin))
tx + ggtitle("Population of Texas Counties")
tx2 <- tx + ggtitle("Population of Texas Counties")
g <- ggplot(data = diamonds, aes(x = carat, y = price)) +
geom_point()
str(g)
g$coordinates
coord_cartesian()
g2 = g + coord_polar()
g + coord_flip()
g + coord_fixed(ratio = 1/10000)
g
g + coord_trans(y = "log10")
g + coord_trans(y = "log10", x = "log10")
g + coord_cartesian(ylim = c(0,5000), xlim = c(0,1))
tx + coord_map()
d2 <- subset(diamonds, color ==
"D")
cc <- ggplot(data = d2, aes(x = color)) + geom_bar(aes(fill = cut), position = "fill")
cc
cc + coord_polar(theta = "y")
scale_aesthetic_name()
ggplot(data = mpg, aes(x = displ, y =
hwy)) + geom_point(aes(color = cty))
last_plot() + scale_color_gradient(low = "red", high = "yellow")
ggplot(data = mpg, aes(x = displ, y = hwy)) +
geom_point(aes(size = cyl))
last_plot() + scale_size_area()
ggplot(data = mpg, aes(x = displ, y = hwy)) + geom_point(aes(shape = fl))
last_plot() + scale_shape_manual(values = c(0, 15, 1, 16, 3))
r <- ggplot(data = mpg, a)
RColorBrewer::display.brewer.all()
tx + scale_fill_brewer(palette = "Greens")
tx + scale_fill_manual(values = c("red", "orange", "yellow", "green", "blue"))
tx + theme_grey()
tx + theme_bw()
tx
tx + theme(panel.border = element_rect(colour = "black", fill = NA))
library(ggthemes)
p + theme_excel() + scale_fill_ex
tx
library(RColorBrewer)
no_axisLabel = tx + ylab("") + xlab("") + ggtitle("Lone Star") +
scale_fill_brewer(palette = "Blues", name = "Population sizes", labels = c('0-999','1000- 9,999', '10,000-99,999', '100,000 - 999,999', '1,000,000+' )) +
coord_map() + theme_bw()
q <- ggplot(data = mpg, aes(x = displ, y = hwy
)) + geom_point()
dates <- c("Sep/1/2012","Aug/1/2013","Jul/1/2013")
# fill your code below``
sorted_dates <- sort(as.Date(dates, format='%B/%d/%y'))
format(sorted_dates, '%B/%d/%y')
dates <- c("Sep/1/2012","Aug/1/2013","Jul/1/2013")
date_ <- sort(as.Date(dates), format='%B/%d/%y'))
dates <- c("Sep/1/2012","Aug/1/2013","Jul/1/2013")
date_ <- sort(as.Date(dates), format='%B/%d/%y'))
weekdays(dates)
date_
weekdays(date_)
date_ <- sort(as.Date(dates), format='%B/%d/%y'))
date_ <- sort(as.Date(dates), format='%B/%d/%y')
date_
dates <- c("Sep/1/2012","Aug/1/2013","Jul/1/2013")
dates
date_ <- sort(as.Date(dates), format='%B/%d/%y')
weekdays(dates)
dates = c("Sep/1/2012","Aug/1/2013","Jul/1/2013")
as.Date(dates, "%b/%d/%Y")
library(lubridate)
mdy(dates)
dates = c("2015-28-January", "2016/17/March", "2017, 11, April")
dates
ydm(dates)
dates <- c("Sep/1/2012","Aug/1/2013","Jul/1/2013")
# fill your code below
dates_sort = sort(as.Date(dates, format='%B/%d/%y'))
sorted_dates
mdy(dates)
# fill your code below
dates_sort = sort(mdy(dates))
dates_sort
# fill your code below
dates_sort = mdy(dates)
dates_sort
# fill your code below
dates_sort = sort(mdy(dates))
dates_sort
date_price
data(date_price)
8   2012-9-1  90  99 85  97
date = c('2012-10-31', '2012-10-20', '2012-10-12', '2012-10-1', '2012-9-11', '2012-9-19', '2012-09-30', '2012-9-1')
date
data(cars)
cars
g <- ggplot(cars, x = speed, y = dist)
library(ggplot2)
data(cars)
g <- ggplot(cars, x = speed, y = dist)
g <- ggplot(cars, x = speed, y = dist) + geom_dotplot()
g
g <- ggplot(cars, x = speed, y = dist) + geom_dotplot(aes(x = speed, y = dist()))
g <- ggplot(cars, x = speed, y = dist) + geom_dotplot(aes(x = speed, y = dist)
g
g <- ggplot(cars, x = speed, y = dist) + geom_dotplot(aes(x = speed, y = dist))
g
g <- ggplot(cars, aes(x = speed, y = dist) + geom_dotplot()
g <- ggplot(cars, aes(x = speed, y = dist)) + geom_dotplot()
g <- ggplot(cars, aes(x = speed, y = dist)) + geom_dotplot(aes(color = speed))
g
g <- ggplot(cars, aes(x = speed, y = dist)) + geom_point()
g
#2
g + xlab("Speed (mpg)") + ylab("Stopping Distance (ft)") + ggtitle("Damn these Things are Fast")
#2
g + xlab("Speed (mpg)") + ylab("Stopping Distance (ft)") + ggtitle("'Damn these Things are Fast'")
#2
g + xlab("Speed (mpg)") + ylab("Stopping Distance (ft)") + ggtitle("'Damn, these Things are Fast'")
#2
with_labels <- g + xlab("Speed (mpg)") + ylab("Stopping Distance (ft)") + ggtitle("'Damn, these Things are Fast'")
#3
with_labels + geom_point(colour = "red", shape = 17)
#3
ggplot(cars, aes(x = speed, y = dist)) + geom_point(colour = "red", shape = 17) + xlab("Speed (mpg)") + ylab("Stopping Distance (ft)") + ggtitle("'Damn, these Things are Fast'")
data("faithful")
faithful
#1
faithful$length = ifelse(eruptions < 3.2, "short", "long")
eruptions
faithful
#1
faithful$length = faithful %>% ifelse(eruptions < 3.2, "short", "long")
library(dyplyr)
library(dplyr)
#1
faithful$length = faithful %>% ifelse(eruptions < 3.2, "short", "long")
faithful$length
faithful
#1
faithful$length = faithful %>% ifelse(eruptions < 3.2, "short", "long")
#1
faithful$length = faithful %>% ifelse(.,eruptions < 3.2, "short", "long")
faithful
#1
faithful$length = ifelse(eruptions < 3.2, "short", "long")
faithful
#1
faithful$length = ifelse(faithful$eruptions < 3.2, "short", "long")
faithful
#2
g <- ggplot(faithful, aes(x = length, y = eruptions)) + geom_boxplot()
g
#3
g + geom_density(aes(color = cut))
#3
ggplot(faithful, aes(x = length, y = eruptions)) + geom_density(aes(color = cut))
#3
ggplot(faithful, aes(x = length, y = eruptions)) + geom_density()
#3
ggplot(faithful, aes(x = length, y = eruptions)) + geom_density()
#3
ggplot(faithful, aes(x = length, y = eruptions)) + geom_density(aes(color = cut))
faithful
#3
ggplot(faithful, aes(x = length, y = waiting)) + geom_density(aes(color = length))
#3
ggplot(faithful, aes(x = length, y = waiting)) + geom_density(aes(color = length)) + zoom
#3
ggplot(faithful, aes(x = length, y = waiting)) + geom_density()
#3
ggplot(faithful, aes(x = length)) + geom_density()
#3
ggplot(faithful, aes(x = waiting)) + geom_density()
#3
ggplot(faithful, aes(x = length)) + geom_density()
#3
ggplot(faithful, aes(x = length, colour = length)) + geom_density()
#3
ggplot(faithful, aes(x = length, colour = length)) + geom_density_2d()
#3
ggplot(faithful, aes(x = length, colour = length)) + geom_density()
#2
g <- ggplot(faithful, aes(x = length, y = eruptions)) + geom_boxplot()
g
#3
ggplot(faithful, aes(x = length, colour = length)) + geom_density()
load(url('https://s3.amazonaws.com/graderdata/Knicks.rda'))
knicks
knicks = load(url('https://s3.amazonaws.com/graderdata/Knicks.rda'))
knicks = load(url('https://s3.amazonaws.com/graderdata/Knicks.rda'))
knicks
View(knicks)
load("/Users/darienbouzakis/Downloads/Knicks.rda")
View(knicks)
data(knicks)
load("~/Downloads/Knicks.rda")
data
colnames(data)
data
babies_2014 = read.csv('yob2014.txt')
babies_2014 = read.csv('~/Dowloads/names/yob2014.txt')
babies_2014 = read.csv('~/Downloads/names/yob2014.txt')
babies_2014
bab_2014 = read.csv('~/Downloads/names/yob2014.txt')
colnames(bab_2014)
bab_2014 = c(Name, Gender, date)
bab_2014 = read.csv('~/Downloads/names/yob2014.txt')
bab_2014 = c('Name', 'Gender', 'date')
bab_2014
bab_2014 = read.csv('~/Downloads/names/yob2014.txt')
bab_2014 = c('Name', 'Gender', 'date')
bab_2014
bab_2014 = read.csv('~/Downloads/names/yob2014.txt')
class(bab_2014)
ans <- bab_2014[, c('Name', 'Gender', 'date')]
bab_2014[, c('Name', 'Gender', 'date')]
#3
ggplot(faithful, aes(x = length, colour = length)) + geom_density(color = length)
#3
ggplot(faithful, aes(x = length, colour = length)) + geom_density()
install.packages('treemap')
library('treemap')
?lubridate
Sys.Date()
Sys.time()
weekdays(dates)
dates <- c("Sep/1/2012","Aug/1/2013","Jul/1/2013")
weekdays(dates)
saturdays <- sort(as.Date(dates, format='%B/%d/%y'))
saturdays
weekdays(dates)
dates <- c("Sep/1/2012","Aug/1/2013","Jul/1/2013")
saturdays <- sort(as.Date(dates, format='%B/%d/%y'))
weekdays(dates)
saturdays <- sort(as.Date(dates, format='%b/%d/%y'))
weekdays(dates)
saturdays
saturdays <- sort(as.Date(dates, format='%b/%d/%Y'))
weekdays(dates)
weekdays(saturdays)
ifelse(saturdays = 'Saturday', TRUE, FALSE)
ifelse(saturdays == 'Saturday', TRUE, FALSE)
week_days = weekdays(saturdays)
ifelse(week_sat == 'Saturday', TRUE, FALSE)
ifelse(week_days == 'Saturday', TRUE, FALSE)
sort_date <- sort(as.Date(dates, format='%b/%d/%Y'))
week_days = weekdays(sort_date)
saturdays <- ifelse(week_days == 'Saturday', TRUE, FALSE)
saturdays
sort_date <- sort(as.Date(dates, format='%b/%d/%Y'))
sort_date
week_days = weekdays(sort_date)
week_days
sort_date[ifelse(weekdays(sort_date) == "Saturday", T, F)]
saturdays <- sort_date[ifelse(weekdays(sort_date) == "Saturday", T, F)]
saturdays <- sort_date[ifelse(weekdays(sort_date) == "Saturday", T, F)]
saturdays
x = data.frame(col1 = 1:4, col2 = 5:8)
x %>% select(col2) %>% max()
x %>% select(max(col2))
x = data.frame(col1 = 1:4, col2 = 5:8)
x %>% select(max(col2))
x = data.frame(col1 = 1:4, col2 = 5:8)
x %>% select(col2) %>% max()
x %>% select(max(col2)
x = data.frame(col1 = 1:4, col2 = 5:8)
x %>% select(max(col2)
x = data.frame(col1 = 1:4, col2 = 5:8)
x %>% select(max(col2)
x %>% select(max(col2))
x = data.frame(col1 = 1:4, col2 = 5:8)
x %>% select(max(col2))
x %>% select(max(x$col2))
faithful
#1
faithful$length = ifelse(faithful$eruptions < 3.2, "short", "long")
faithful
#2
g <- ggplot(faithful, aes(x = length, y = eruptions)) + geom_boxplot()
g
#3
ggplot(faithful, aes(x = length, colour = length)) + geom_density()
summarize(faithful, length )
library(dplyr)
summarize(faithful, length )
faithful
#3
ggplot(faithful, aes(x = waiting, colour = length)) + geom_density()
#2
g <- ggplot(faithful, aes(x = length, y = eruptions)) + geom_boxplot()
g
#3
ggplot(faithful, aes(x = waiting, colour = length)) + geom_density()
#2
g <- ggplot(faithful, aes(x = length, y = eruptions)) + geom_boxplot()
g
colnames(bab_2014)
bab_2014
bab_2014 = read.csv('~/Downloads/names/yob2014.txt', header = FALSE)
bab_2014
colnames(bab_2014)
colnames(bab_2014) =  c('Name', 'Gender', 'date')
head(bab_2014)
rm(list = ls())
options(tz="US/New York")
library(dplyr)
nav_fund <- data.frame(read.csv("./GINGX.csv"))      #probably would have to pay for the rest of the holdings or actually invest in the fund
total_fund_assets = 11100000
visa %>% select(., High, Adj.Close, Volume) %>%
mutate(., V_fund_allocation = total_fund_assets * .041)
visa %>% select(., High, Adj.Close, Volume) %>%
mutate(., V_fund_allocation = total_fund_assets * .041)
library(data.table)
library(dplyr)
setwd('./ShinyDemo/csvs')
nav_fund <- data.frame(read.csv("./GINGX.csv"))      #probably would have to pay for the rest of the holdings or actually invest in the fund
visa %>% select(., High, Adj.Close, Volume) %>%
mutate(., V_fund_allocation = total_fund_assets * .041)
visa %>% select(., High, Adj.Close, Volume) %>% mutate(., V_fund_allocation = total_fund_assets * .041)
library(dplyr)
library(dplyr)
